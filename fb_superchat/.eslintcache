[{"C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\index.js":"1","C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\App.js":"2","C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4988,"mtime":1609304938801,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"vkl64w",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\index.js",[],["17","18"],"C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\App.js",["19"],"import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBEoGDDBIOF5ymIy1t1M1x8Km2i0Z5Zwik\",\n  authDomain: \"fir-chat-app-62328.firebaseapp.com\",\n  databaseURL: \"https://console.firebase.google.com/project/fir-chat-app-62328/firestore/data/\",\n  // databaseURL: \"https://fireship-demos.firebaseio.com\",\n  projectId: \"fir-chat-app-62328\",\n  storageBucket: \"fir-chat-app-62328.appspot.com\",\n  messagingSenderId: \"593538237888\",\n  appId: \"1:593538237888:web:d24e4d98b1d14a444e7425\",\n  measurementId: \"G-X3NR5Y4KDH\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n//useAuthState hook returns a user object if user is signed in, else returns null\nconst [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n      {/* ternary operator shows chatroom if user is logged in, or sign in if not */}\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n//instantiates a provider and pass it to the method signInWithPopup which triggers popup window when user clicks button \n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  //listens to click event and runs a function called sign in with google\n  return (\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n//checks to see if user is a current user & button is clicked to trigger sign out function\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\nfunction ChatRoom() {\n//  useRef hook to reference the dummy element to enable autoscroll\n  const dummy = useRef();\n\n  //makes a reference to a point where a message is created in the database by calling firestore.collection\n  const messagesRef = firestore.collection('messages');\n \n  //query for a subset of documents in order of timestamps for message creation for last 25 messages\n  const query = messagesRef.orderBy('createdAt').limitToLast(25);\n\n  //listen to updates to data in realtime with useCollectionData hook, returns an array of objects which each object is a chat message in the dastabase and reacts in real time to new messages\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  //add a stateful value in component called form value with a useState hook to bind \n  const [formValue, setFormValue] = useState('');\n\n  // event handler defined as an async function in the component that takes the event as its argument\n  const sendMessage = async (e) => {\n   \n    // prevents the page from refreshing every time there is a new submission\n    e.preventDefault();\n\n    // takes user ID from current user\n    const { uid, photoURL } = auth.currentUser;\n\n// creates new document in firestore database that takes a JS object as its argument\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    // resets form value to empty string\n    setFormValue('');\n    }\n\n    // called when user sends a message to scroll page to newest message\n    useEffect(() => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' });}, [messages]\n    )\n\n  return (<>\n  <main>\n    {/* loop over each document, for each use a dedicated chat message component with a key prop for msg id and passes the document data as the message prop  */}\n    {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n{/* enables autoscrolling to the most recent messages with dummy prop*/}\n    <div ref={dummy}></div>\n\n    </main>)\n\n{/* way for user to send a message in the UI, listener*/}\n<form onSubmit={sendMessage}>\n\n{/* binds state to the form input value, listens for input of user to set change to form value state*/}\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n{/* writes value to firestore */}\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n</form>\n    </>)\n}\n//chatMessage child component, shows actual text by accessing it from the props.message \nfunction ChatMessage(props) {\n  \n  const { text, uid, photoURL } = props.message;\n\n  //compares whether message is sent or received by checking user id on firestore document\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  //apply different styling depending on whether message was sent or received\n  return (<>\n  <div className={`message ${messageClass}`}>\n    <img src={photoURL} />\n    <p>{text}</p>\n    </div>\n    </>)\n}\n\nexport default App;\n","C:\\Users\\Eric\\Desktop\\firebase\\fb_superchat\\src\\reportWebVitals.js",[],["20","21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":137,"column":5,"nodeType":"28","endLine":137,"endColumn":27},{"ruleId":"22","replacedBy":"29"},{"ruleId":"24","replacedBy":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["31"],["32"],"no-global-assign","no-unsafe-negation"]